{
	"$schema": "https://raw.githubusercontent.com/martinring/tmlanguage/master/tmlanguage.json",
	"name": "xvm",
	"scopeName": "source.xvm",
	"patterns": [
		{
			"include": "#function_declaration"
		},
		{
			"include": "#function_receiver"
		},
		{
			"include": "#all_functions"
		},
		{
			"include": "#struct_declaration"
		},
		{
			"include": "#var_types"
		},
		{
			"include": "#constants"
		},
		{
			"include": "#comments"
		},
		{
			"include": "#brackets"
		},
		{
			"include": "#delimiters"
		},
		{
			"include": "#keywords"
		},
		{
			"include": "#operators"
		},
		{
			"include": "#string_literal"
		},
		{
			"include": "#storage_types"
		},
		{
			"include": "#env_functions"
		}
	],
	"repository": {
		"constants": {
			"patterns": [
				{
					"match": "\\b(true|false)|(null)\\b",
					"captures": {
						"1": {
							"name": "constant.language.boolean.xvm"
						},
						"2": {
							"name": "constant.language.null.xvm"
						}
					}
				},
				{
					"match": "\\b(\\d|_)+L?\\b",
					"name": "constant.numeric.xvm"
				}
			]
		},
		"comments": {
			"patterns": [
				{
					"begin": "(\\/\\/)",
					"end": "(?:\\n|$)",
					"name": "comment.line.double-slash.xvm"
				}
			]
		},
		"brackets": {
			"patterns": [
				{
					"begin": "\\{",
					"beginCaptures": {
						"0": {
							"name": "punctuation.definition.begin.bracket.curly.go"
						}
					},
					"end": "\\}",
					"endCaptures": {
						"0": {
							"name": "punctuation.definition.end.bracket.curly.go"
						}
					},
					"patterns": [
						{
							"include": "$self"
						}
					]
				},
				{
					"begin": "\\(",
					"beginCaptures": {
						"0": {
							"name": "punctuation.definition.begin.bracket.round.go"
						}
					},
					"end": "\\)",
					"endCaptures": {
						"0": {
							"name": "punctuation.definition.end.bracket.round.go"
						}
					},
					"patterns": [
						{
							"include": "$self"
						}
					]
				},
				{
					"begin": "\\[",
					"beginCaptures": {
						"0": {
							"name": "punctuation.definition.begin.bracket.square.go"
						}
					},
					"end": "\\]",
					"endCaptures": {
						"0": {
							"name": "punctuation.definition.end.bracket.square.go"
						}
					},
					"patterns": [
						{
							"include": "$self"
						}
					]
				}
			]
		},
		"delimiters": {
			"patterns": [
				{
					"match": "\\,",
					"name": "punctuation.other.comma.go"
				},
				{
					"match": "\\.(?!\\.\\.)",
					"name": "punctuation.other.period.go"
				},
				{
					"match": ":(?!=)",
					"name": "punctuation.other.colon.go"
				}
			]
		},
		"keywords": {
			"patterns": [
				{
					"match": "\\b(as|if|else|continue|return|for|foreach|in|while)\\b",
					"name": "keyword.control.xvm"
				},
				{
					"match": "\\bconst\\b",
					"name": "keyword.const.xvm"
				},
				{
					"match": "\\blet\\b",
					"name": "keyword.let.xvm"
				},
				{
					"match": "\\bfunc\\b",
					"name": "keyword.function.xvm"
				},
				{
					"match": "\\bentry\\b",
					"name": "keyword.function.main.xvm"
				},
				{
					"match": "\\bstruct\\b",
					"name": "entity.name.class.xvm"
				}
			]
		},
		"operators": {
			"patterns": [
				{
					"match": "(==|!=|<=|>=|<(?!<)|>(?!>))",
					"name": "keyword.operator.comparison.xvm"
				},
				{
					"match": "(&&|\\|\\||!)",
					"name": "keyword.operator.logical.xvm"
				},
				{
					"match": "(=|\\+=|\\-=)",
					"name": "keyword.operator.assignment.xvm"
				},
				{
					"match": "(\\+|\\-|\\*|/|%)",
					"name": "keyword.operator.arithmetic.xvm"
				},
				{
					"match": "(<<|>>)",
					"name": "keyword.operator.bitwise.xvm"
				},
				{
					"match": "\\?|:",
					"name": "keyword.operator.ternary.xvm"
				},
				{
					"match": "\\.\\.",
					"name": "keyword.operator.range.xvm"
				}
			]
		},
		"string_literal": {
			"patterns": [
				{
					"begin": "\"",
					"end": "\"",
					"name": "string.quoted.double.xvm"
				}
			]
		},
		"storage_types": {
			"patterns": [
				{
					"match": "\\bstring\\b",
					"name": "storage.type.string.xvm"
				},
				{
					"match": "\\bbool\\b",
					"name": "storage.type.boolean.xvm"
				},
				{
					"match": "\\bbyte\\b",
					"name": "storage.type.byte.xvm"
				},
				{
					"match": "\\bshort\\b",
					"name": "storage.type.short.xvm"
				},
				{
					"match": "\\bint\\b",
					"name": "storage.type.int.xvm"
				},
				{
					"match": "\\blong\\b",
					"name": "storage.type.long.xvm"
				},
				{
					"match": "\\bstruct\\b",
					"name": "storage.type.struct.xvm"
				},
				{
					"match": "\\b(optional)\\b<(\\w+)>",
					"captures": {
						"1": {
							"name": "entity.name.type.optional.xvm"
						},
						"2": {
							"patterns": [
								{
									"include": "$self"
								}
							]
						}
					}
				},
				{
					"match": "\\b(u8|u16|u32|u64)\\b",
					"name": "storage.type.numeric.xvm"
				},
				{
					"match": "\\b(\\w+)\\[\\]\\b",
					"captures": {
						"1": {
							"name": "storage.type.array.xvm"
						}
					}
				}
			]
		},
		"struct_declaration": {
			"match": "(^\\bstruct\\b)\\s*(\\w+)\\s*\\{",
			"captures": {
				"1": {
					"name": "storage.type.struct.xvm"
				},
				"2": {
					"name": "entity.name.class.xvm"
				}
			}
		},
		"var_types": {
			"match": "\\w+:\\s+(\\w+)",
			"captures": {
				"1": {
									"name": "entity.name.class.xvm",
					"patterns": [
						{
							"include": "#storage_types"
						}
					]
				}
			}
		},
		"function_declaration": {
			"match": "(?:^\\b(fn|entry)\\b)\\s*(\\w+)\\s*\\(?(.*)\\)?\\s*(?:->\\s*(\\w+))?\\s*\\{",
			"captures": {
				"1": {
					"name": "keyword.function.xvm"
				},
				"2": {
					"name": "entity.name.function.xvm"
				},
				"3": {
					"patterns": [
						{
							"include": "#parameters"
						}
					]
				},
				"4": {
					"patterns": [
						{
							"include": "#storage_types"
						}
					]
				}
			}
		},
		"function_receiver": {
			"match": "\\bfn\\s*\\((\\w+)\\s+(\\w+)\\)\\s*(\\w+)",
			"captures": {
				"1": {
					"name": "variable.parameter.xvm"
				},
				"2": {
					"name": "entity.name.type.struct.xvm"
				},
				"3": {
					"name": "entity.name.function.xvm"
				}
			}
		},
		"all_functions": {
			"patterns": [
				{
					"match": "\\w+\\(",
					"name": "entity.name.function.xvm"
				}
			]
		},
		"env_functions": {
			"patterns": [
				{
					"match": "\\bprintln\\b",
					"name": "entity.name.function.env.xvm"
				}
			]
		}
	}
}